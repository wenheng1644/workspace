---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wenheng.
--- DateTime: 23-4-24 上午12:18
---

LOGFILEPATH = "./log/"
CHATLOGFILENAME = "chatLog.log"

function Serialize(tb, level)
    --assert(type(tb) == "table", "tb is not a table")
    level = level or 1
    if type(tb) ~= "table" then
        print("tb is not a table")
        error("tb is not a table")

    end

    local str = ""

    str = str .. "{\n"
    for k, v in pairs(tb) do
        if type(k) == "string" then
            str = str .. string.rep("\t", level) .. "[\'" .. k .. "\']"
        end

        if type(k) == "number" then
            str = str .. string.rep("\t", level) .. "[" .. k .. "]"
        end

        str = str .. " = "
        if type(v) == "string" then
            str = str .. "\'" .. v .."\'"
        end

        if type(v) == "number" then
            str = str .. v
        end

        if type(v) == "table" then
            str = str .. Serialize(v, level + 1)
        end

        if type(v) == "function" then
            str = str .. tostring(v)
        end

        str = str .. ",\n"
    end
    str = str .. string.rep("\t", level - 1) ..  "}"
    return str
end

function UnSerialize(str)
    local tb = load("return " .. str)()
    return tb or {}
end

string.serialize = Serialize
string.unserialize = UnSerialize

function GetDate(timeZone)
    local date = os.date("*t", timeZone or os.time())
    local date_str = string.format("%04d-%02d-%02d", date.year, date.month, date.day)
    local datetime_str = string.format("%s %02d:%02d:%02d", date_str, date.hour, date.min, date.sec)

    return date, date_str, datetime_str
end

function OpenFile(filename, mode)
    mode = mode or "r"

    local _, dateStr = GetDate()
    filename = filename or dateStr

    local fd = io.open(filename, mode)
    assert(fd, string.format("%s can't open...", filename))

    return fd
end

function dump(tb, level)
    assert(type(tb) == "table", "tb must be a table")
    level = level or 1

    io.write("{\n")
    for k, v in pairs(tb) do
        if type(k) == "number" or type(k) == "string" then
            local str = string.rep("\t", level) .. "[" .. tostring(k) .. "]" .. " = "
            io.write(str)
        end

        if type(v) == "number" or type(v) == "string" or type(v) == "boolean" or type(v) == "function" then
            local str = tostring(v) .. ",\n"
            io.write(str)
        elseif type(v) == "table" then
            dump(v, level + 1)
        end
    end
    local str = string.rep("\t", level - 1) .. "},\n"
    io.write(str)
end

function GetTimeZoneFromDateTimeStr(datetime_str)
    local tm = {}

    local partten = "(%d+)-(%d+)-(%d+) (%d+):(%d+):(%d+)"
    local year, month, day, hour, min, sec = string.match(datetime_str, partten)

    if year then
        tm.year = tonumber(year)
        tm.month = tonumber(month)
        tm.day = tonumber(day)
        tm.hour = tonumber(hour)
        tm.min = tonumber(min)
        tm.sec = tonumber(sec)
    
        local time = os.time(tm)
    
        return time
    end
end

function GetDateTimeStrFromTimeZone(timezone)
    return GetDate(timezone)
end