//
// Created by wenheng on 2022/7/10.
//

#include "sys/socket.h"
#include "sys/types.h"
#include "netinet/in.h"
#include "arpa/inet.h"
#include "unistd.h"
#include "iostream"
#include "cstring"
#include "linuxSock.h"

#define MAXBYTES 256



int main(int argc, char* argv[])
{
//    int listenfd = socket(AF_INET, SOCK_STREAM, 0);
//    if(-1 == listenfd)
//    {
//        perror("listenfd create error...");
//        return EXIT_FAILURE;
//    }
//
//    struct sockaddr_in addr;
//    addr.sin_family = AF_INET;
//    addr.sin_addr.s_addr = htonl(INADDR_ANY);
//    addr.sin_port = htons(8800);
//
//    if(bind(listenfd, (sockaddr*)&addr, sizeof(addr)) == -1)
//    {
//        perror("listenfd bind error...");
//        return EXIT_FAILURE;
//    }
//
//    if(listen(listenfd, SOMAXCONN) == -1)
//    {
//        perror("listenfd listen error...");
//        return EXIT_FAILURE;
//    }
//
//    printf("server start to listen~~\n");
//    while(true)
//    {
//        struct sockaddr_in client_addr;
//        socklen_t addr_len = sizeof(client_addr);
//
//        int clientfd = accept(listenfd, (sockaddr *)&client_addr, &addr_len);
//        if(-1 == clientfd)
//        {
//            perror("accept socket is error...");
//            return EXIT_FAILURE;
//        }
//        printf("just accpet........\n");
//        char rev[MAXBYTES] = {0};
//        int ret = recv(clientfd, rev, MAXBYTES, 0);
//
//        if(ret > 0)
//        {
//            printf("rev bytes: %s\n", rev);
//            int sendBytes = send(clientfd, rev, strlen(rev), 0);
//
//            if(sendBytes != strlen(rev))
//            {
//                printf("send data bytes error\t sendBytes: %d and all: %d\n", sendBytes, strlen(rev));
//            }
//            else
//            {
//                printf("send data ok~\n");
//            }
//            printf("addr: %s\t port: %d\tfd: %d\n", inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port),clientfd);
//        }
//        else
//        {
//            printf("no data rev...\n");
//            printf("fd: %d\n", clientfd);
//        }

//        close(clientfd);
//    }

//    close(listenfd);

    // linuxSock::operator_start();

    // if(argc != 2)
    // {
    //     printf("arg number not enough\n");
    // }
    // else
    // {
    //     int port = atoi(argv[1]);
    //     linuxSock::udp_echo_strat(port);
    // }
    linuxSock::file_trans_start();
    return EXIT_SUCCESS;

//    linuxSock::server_start();
}