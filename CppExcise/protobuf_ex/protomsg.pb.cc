// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protomsg.proto

#include "protomsg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace persion {
PROTOBUF_CONSTEXPR Persion::Persion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.age_)*/0
  , /*decltype(_impl_.sex_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PersionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PersionDefaultTypeInternal() {}
  union {
    Persion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PersionDefaultTypeInternal _Persion_default_instance_;
PROTOBUF_CONSTEXPR ChatCmd::ChatCmd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.p_)*/nullptr
  , /*decltype(_impl_.time_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChatCmdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatCmdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatCmdDefaultTypeInternal() {}
  union {
    ChatCmd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatCmdDefaultTypeInternal _ChatCmd_default_instance_;
PROTOBUF_CONSTEXPR PersionList_ListEntry_DoNotUse::PersionList_ListEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PersionList_ListEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PersionList_ListEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PersionList_ListEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PersionList_ListEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PersionList_ListEntry_DoNotUseDefaultTypeInternal _PersionList_ListEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PersionList::PersionList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.time_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PersionListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PersionListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PersionListDefaultTypeInternal() {}
  union {
    PersionList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PersionListDefaultTypeInternal _PersionList_default_instance_;
}  // namespace persion
static ::_pb::Metadata file_level_metadata_protomsg_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_protomsg_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_protomsg_2eproto = nullptr;

const uint32_t TableStruct_protomsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::persion::Persion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::persion::Persion, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::persion::Persion, _impl_.age_),
  PROTOBUF_FIELD_OFFSET(::persion::Persion, _impl_.sex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::persion::ChatCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::persion::ChatCmd, _impl_.p_),
  PROTOBUF_FIELD_OFFSET(::persion::ChatCmd, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::persion::ChatCmd, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::persion::PersionList_ListEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::persion::PersionList_ListEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::persion::PersionList_ListEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::persion::PersionList_ListEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::persion::PersionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::persion::PersionList, _impl_.list_),
  PROTOBUF_FIELD_OFFSET(::persion::PersionList, _impl_.time_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::persion::Persion)},
  { 9, -1, -1, sizeof(::persion::ChatCmd)},
  { 18, 26, -1, sizeof(::persion::PersionList_ListEntry_DoNotUse)},
  { 28, -1, -1, sizeof(::persion::PersionList)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::persion::_Persion_default_instance_._instance,
  &::persion::_ChatCmd_default_instance_._instance,
  &::persion::_PersionList_ListEntry_DoNotUse_default_instance_._instance,
  &::persion::_PersionList_default_instance_._instance,
};

const char descriptor_table_protodef_protomsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016protomsg.proto\022\007persion\"1\n\007Persion\022\014\n\004"
  "name\030\001 \001(\t\022\013\n\003age\030\002 \001(\005\022\013\n\003sex\030\003 \001(\005\"E\n\007"
  "ChatCmd\022\033\n\001p\030\001 \001(\0132\020.persion.Persion\022\014\n\004"
  "time\030\002 \001(\004\022\017\n\007content\030\003 \001(\t\"\210\001\n\013PersionL"
  "ist\022,\n\004list\030\001 \003(\0132\036.persion.PersionList."
  "ListEntry\022\014\n\004time\030\002 \001(\004\032=\n\tListEntry\022\013\n\003"
  "key\030\001 \001(\005\022\037\n\005value\030\002 \001(\0132\020.persion.Persi"
  "on:\0028\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_protomsg_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protomsg_2eproto = {
    false, false, 294, descriptor_table_protodef_protomsg_2eproto,
    "protomsg.proto",
    &descriptor_table_protomsg_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_protomsg_2eproto::offsets,
    file_level_metadata_protomsg_2eproto, file_level_enum_descriptors_protomsg_2eproto,
    file_level_service_descriptors_protomsg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protomsg_2eproto_getter() {
  return &descriptor_table_protomsg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protomsg_2eproto(&descriptor_table_protomsg_2eproto);
namespace persion {

// ===================================================================

class Persion::_Internal {
 public:
};

Persion::Persion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:persion.Persion)
}
Persion::Persion(const Persion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Persion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.age_){}
    , decltype(_impl_.sex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.age_, &from._impl_.age_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sex_) -
    reinterpret_cast<char*>(&_impl_.age_)) + sizeof(_impl_.sex_));
  // @@protoc_insertion_point(copy_constructor:persion.Persion)
}

inline void Persion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.age_){0}
    , decltype(_impl_.sex_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Persion::~Persion() {
  // @@protoc_insertion_point(destructor:persion.Persion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Persion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void Persion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Persion::Clear() {
// @@protoc_insertion_point(message_clear_start:persion.Persion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.age_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sex_) -
      reinterpret_cast<char*>(&_impl_.age_)) + sizeof(_impl_.sex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Persion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "persion.Persion.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 age = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.sex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Persion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:persion.Persion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "persion.Persion.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 age = 2;
  if (this->_internal_age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_age(), target);
  }

  // int32 sex = 3;
  if (this->_internal_sex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_sex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:persion.Persion)
  return target;
}

size_t Persion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:persion.Persion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 age = 2;
  if (this->_internal_age() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_age());
  }

  // int32 sex = 3;
  if (this->_internal_sex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Persion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Persion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Persion::GetClassData() const { return &_class_data_; }


void Persion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Persion*>(&to_msg);
  auto& from = static_cast<const Persion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:persion.Persion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_age() != 0) {
    _this->_internal_set_age(from._internal_age());
  }
  if (from._internal_sex() != 0) {
    _this->_internal_set_sex(from._internal_sex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Persion::CopyFrom(const Persion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:persion.Persion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Persion::IsInitialized() const {
  return true;
}

void Persion::InternalSwap(Persion* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Persion, _impl_.sex_)
      + sizeof(Persion::_impl_.sex_)
      - PROTOBUF_FIELD_OFFSET(Persion, _impl_.age_)>(
          reinterpret_cast<char*>(&_impl_.age_),
          reinterpret_cast<char*>(&other->_impl_.age_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Persion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protomsg_2eproto_getter, &descriptor_table_protomsg_2eproto_once,
      file_level_metadata_protomsg_2eproto[0]);
}

// ===================================================================

class ChatCmd::_Internal {
 public:
  static const ::persion::Persion& p(const ChatCmd* msg);
};

const ::persion::Persion&
ChatCmd::_Internal::p(const ChatCmd* msg) {
  return *msg->_impl_.p_;
}
ChatCmd::ChatCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:persion.ChatCmd)
}
ChatCmd::ChatCmd(const ChatCmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatCmd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.p_){nullptr}
    , decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_p()) {
    _this->_impl_.p_ = new ::persion::Persion(*from._impl_.p_);
  }
  _this->_impl_.time_ = from._impl_.time_;
  // @@protoc_insertion_point(copy_constructor:persion.ChatCmd)
}

inline void ChatCmd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.p_){nullptr}
    , decltype(_impl_.time_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChatCmd::~ChatCmd() {
  // @@protoc_insertion_point(destructor:persion.ChatCmd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatCmd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
  if (this != internal_default_instance()) delete _impl_.p_;
}

void ChatCmd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:persion.ChatCmd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.p_ != nullptr) {
    delete _impl_.p_;
  }
  _impl_.p_ = nullptr;
  _impl_.time_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatCmd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .persion.Persion p = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_p(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "persion.ChatCmd.content"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatCmd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:persion.ChatCmd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .persion.Persion p = 1;
  if (this->_internal_has_p()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::p(this),
        _Internal::p(this).GetCachedSize(), target, stream);
  }

  // uint64 time = 2;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_time(), target);
  }

  // string content = 3;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "persion.ChatCmd.content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:persion.ChatCmd)
  return target;
}

size_t ChatCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:persion.ChatCmd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // .persion.Persion p = 1;
  if (this->_internal_has_p()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.p_);
  }

  // uint64 time = 2;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatCmd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatCmd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatCmd::GetClassData() const { return &_class_data_; }


void ChatCmd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatCmd*>(&to_msg);
  auto& from = static_cast<const ChatCmd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:persion.ChatCmd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_has_p()) {
    _this->_internal_mutable_p()->::persion::Persion::MergeFrom(
        from._internal_p());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatCmd::CopyFrom(const ChatCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:persion.ChatCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatCmd::IsInitialized() const {
  return true;
}

void ChatCmd::InternalSwap(ChatCmd* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatCmd, _impl_.time_)
      + sizeof(ChatCmd::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(ChatCmd, _impl_.p_)>(
          reinterpret_cast<char*>(&_impl_.p_),
          reinterpret_cast<char*>(&other->_impl_.p_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatCmd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protomsg_2eproto_getter, &descriptor_table_protomsg_2eproto_once,
      file_level_metadata_protomsg_2eproto[1]);
}

// ===================================================================

PersionList_ListEntry_DoNotUse::PersionList_ListEntry_DoNotUse() {}
PersionList_ListEntry_DoNotUse::PersionList_ListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PersionList_ListEntry_DoNotUse::MergeFrom(const PersionList_ListEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PersionList_ListEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protomsg_2eproto_getter, &descriptor_table_protomsg_2eproto_once,
      file_level_metadata_protomsg_2eproto[2]);
}

// ===================================================================

class PersionList::_Internal {
 public:
};

PersionList::PersionList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &PersionList::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:persion.PersionList)
}
PersionList::PersionList(const PersionList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PersionList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.list_)*/{}
    , decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.list_.MergeFrom(from._impl_.list_);
  _this->_impl_.time_ = from._impl_.time_;
  // @@protoc_insertion_point(copy_constructor:persion.PersionList)
}

inline void PersionList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.list_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.time_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PersionList::~PersionList() {
  // @@protoc_insertion_point(destructor:persion.PersionList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void PersionList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_.Destruct();
  _impl_.list_.~MapField();
}

void PersionList::ArenaDtor(void* object) {
  PersionList* _this = reinterpret_cast< PersionList* >(object);
  _this->_impl_.list_.Destruct();
}
void PersionList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PersionList::Clear() {
// @@protoc_insertion_point(message_clear_start:persion.PersionList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_.Clear();
  _impl_.time_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PersionList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int32, .persion.Persion> list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.list_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PersionList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:persion.PersionList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .persion.Persion> list = 1;
  if (!this->_internal_list().empty()) {
    using MapType = ::_pb::Map<int32_t, ::persion::Persion>;
    using WireHelper = PersionList_ListEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_list();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  // uint64 time = 2;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:persion.PersionList)
  return target;
}

size_t PersionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:persion.PersionList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .persion.Persion> list = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_list_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::persion::Persion >::const_iterator
      it = this->_internal_list().begin();
      it != this->_internal_list().end(); ++it) {
    total_size += PersionList_ListEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint64 time = 2;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PersionList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PersionList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PersionList::GetClassData() const { return &_class_data_; }


void PersionList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PersionList*>(&to_msg);
  auto& from = static_cast<const PersionList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:persion.PersionList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.list_.MergeFrom(from._impl_.list_);
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PersionList::CopyFrom(const PersionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:persion.PersionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersionList::IsInitialized() const {
  return true;
}

void PersionList::InternalSwap(PersionList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.list_.InternalSwap(&other->_impl_.list_);
  swap(_impl_.time_, other->_impl_.time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PersionList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protomsg_2eproto_getter, &descriptor_table_protomsg_2eproto_once,
      file_level_metadata_protomsg_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace persion
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::persion::Persion*
Arena::CreateMaybeMessage< ::persion::Persion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::persion::Persion >(arena);
}
template<> PROTOBUF_NOINLINE ::persion::ChatCmd*
Arena::CreateMaybeMessage< ::persion::ChatCmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::persion::ChatCmd >(arena);
}
template<> PROTOBUF_NOINLINE ::persion::PersionList_ListEntry_DoNotUse*
Arena::CreateMaybeMessage< ::persion::PersionList_ListEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::persion::PersionList_ListEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::persion::PersionList*
Arena::CreateMaybeMessage< ::persion::PersionList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::persion::PersionList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
