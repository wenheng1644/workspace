// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protomsg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protomsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protomsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protomsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protomsg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protomsg_2eproto;
namespace persion {
class ChatCmd;
struct ChatCmdDefaultTypeInternal;
extern ChatCmdDefaultTypeInternal _ChatCmd_default_instance_;
class Persion;
struct PersionDefaultTypeInternal;
extern PersionDefaultTypeInternal _Persion_default_instance_;
class PersionList;
struct PersionListDefaultTypeInternal;
extern PersionListDefaultTypeInternal _PersionList_default_instance_;
class PersionList_ListEntry_DoNotUse;
struct PersionList_ListEntry_DoNotUseDefaultTypeInternal;
extern PersionList_ListEntry_DoNotUseDefaultTypeInternal _PersionList_ListEntry_DoNotUse_default_instance_;
}  // namespace persion
PROTOBUF_NAMESPACE_OPEN
template<> ::persion::ChatCmd* Arena::CreateMaybeMessage<::persion::ChatCmd>(Arena*);
template<> ::persion::Persion* Arena::CreateMaybeMessage<::persion::Persion>(Arena*);
template<> ::persion::PersionList* Arena::CreateMaybeMessage<::persion::PersionList>(Arena*);
template<> ::persion::PersionList_ListEntry_DoNotUse* Arena::CreateMaybeMessage<::persion::PersionList_ListEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace persion {

// ===================================================================

class Persion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:persion.Persion) */ {
 public:
  inline Persion() : Persion(nullptr) {}
  ~Persion() override;
  explicit PROTOBUF_CONSTEXPR Persion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Persion(const Persion& from);
  Persion(Persion&& from) noexcept
    : Persion() {
    *this = ::std::move(from);
  }

  inline Persion& operator=(const Persion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Persion& operator=(Persion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Persion& default_instance() {
    return *internal_default_instance();
  }
  static inline const Persion* internal_default_instance() {
    return reinterpret_cast<const Persion*>(
               &_Persion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Persion& a, Persion& b) {
    a.Swap(&b);
  }
  inline void Swap(Persion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Persion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Persion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Persion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Persion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Persion& from) {
    Persion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Persion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "persion.Persion";
  }
  protected:
  explicit Persion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAgeFieldNumber = 2,
    kSexFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 age = 2;
  void clear_age();
  int32_t age() const;
  void set_age(int32_t value);
  private:
  int32_t _internal_age() const;
  void _internal_set_age(int32_t value);
  public:

  // int32 sex = 3;
  void clear_sex();
  int32_t sex() const;
  void set_sex(int32_t value);
  private:
  int32_t _internal_sex() const;
  void _internal_set_sex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:persion.Persion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t age_;
    int32_t sex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protomsg_2eproto;
};
// -------------------------------------------------------------------

class ChatCmd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:persion.ChatCmd) */ {
 public:
  inline ChatCmd() : ChatCmd(nullptr) {}
  ~ChatCmd() override;
  explicit PROTOBUF_CONSTEXPR ChatCmd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatCmd(const ChatCmd& from);
  ChatCmd(ChatCmd&& from) noexcept
    : ChatCmd() {
    *this = ::std::move(from);
  }

  inline ChatCmd& operator=(const ChatCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatCmd& operator=(ChatCmd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatCmd& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatCmd* internal_default_instance() {
    return reinterpret_cast<const ChatCmd*>(
               &_ChatCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChatCmd& a, ChatCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatCmd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatCmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatCmd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatCmd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChatCmd& from) {
    ChatCmd::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatCmd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "persion.ChatCmd";
  }
  protected:
  explicit ChatCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 3,
    kPFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // string content = 3;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // .persion.Persion p = 1;
  bool has_p() const;
  private:
  bool _internal_has_p() const;
  public:
  void clear_p();
  const ::persion::Persion& p() const;
  PROTOBUF_NODISCARD ::persion::Persion* release_p();
  ::persion::Persion* mutable_p();
  void set_allocated_p(::persion::Persion* p);
  private:
  const ::persion::Persion& _internal_p() const;
  ::persion::Persion* _internal_mutable_p();
  public:
  void unsafe_arena_set_allocated_p(
      ::persion::Persion* p);
  ::persion::Persion* unsafe_arena_release_p();

  // uint64 time = 2;
  void clear_time();
  uint64_t time() const;
  void set_time(uint64_t value);
  private:
  uint64_t _internal_time() const;
  void _internal_set_time(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:persion.ChatCmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::persion::Persion* p_;
    uint64_t time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protomsg_2eproto;
};
// -------------------------------------------------------------------

class PersionList_ListEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PersionList_ListEntry_DoNotUse, 
    int32_t, ::persion::Persion,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PersionList_ListEntry_DoNotUse, 
    int32_t, ::persion::Persion,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  PersionList_ListEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PersionList_ListEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PersionList_ListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PersionList_ListEntry_DoNotUse& other);
  static const PersionList_ListEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PersionList_ListEntry_DoNotUse*>(&_PersionList_ListEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_protomsg_2eproto;
};

// -------------------------------------------------------------------

class PersionList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:persion.PersionList) */ {
 public:
  inline PersionList() : PersionList(nullptr) {}
  ~PersionList() override;
  explicit PROTOBUF_CONSTEXPR PersionList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PersionList(const PersionList& from);
  PersionList(PersionList&& from) noexcept
    : PersionList() {
    *this = ::std::move(from);
  }

  inline PersionList& operator=(const PersionList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersionList& operator=(PersionList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PersionList& default_instance() {
    return *internal_default_instance();
  }
  static inline const PersionList* internal_default_instance() {
    return reinterpret_cast<const PersionList*>(
               &_PersionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PersionList& a, PersionList& b) {
    a.Swap(&b);
  }
  inline void Swap(PersionList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PersionList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PersionList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PersionList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PersionList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PersionList& from) {
    PersionList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PersionList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "persion.PersionList";
  }
  protected:
  explicit PersionList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // map<int32, .persion.Persion> list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::persion::Persion >&
      _internal_list() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::persion::Persion >*
      _internal_mutable_list();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::persion::Persion >&
      list() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::persion::Persion >*
      mutable_list();

  // uint64 time = 2;
  void clear_time();
  uint64_t time() const;
  void set_time(uint64_t value);
  private:
  uint64_t _internal_time() const;
  void _internal_set_time(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:persion.PersionList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PersionList_ListEntry_DoNotUse,
        int32_t, ::persion::Persion,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> list_;
    uint64_t time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protomsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Persion

// string name = 1;
inline void Persion::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Persion::name() const {
  // @@protoc_insertion_point(field_get:persion.Persion.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Persion::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:persion.Persion.name)
}
inline std::string* Persion::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:persion.Persion.name)
  return _s;
}
inline const std::string& Persion::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Persion::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Persion::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Persion::release_name() {
  // @@protoc_insertion_point(field_release:persion.Persion.name)
  return _impl_.name_.Release();
}
inline void Persion::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:persion.Persion.name)
}

// int32 age = 2;
inline void Persion::clear_age() {
  _impl_.age_ = 0;
}
inline int32_t Persion::_internal_age() const {
  return _impl_.age_;
}
inline int32_t Persion::age() const {
  // @@protoc_insertion_point(field_get:persion.Persion.age)
  return _internal_age();
}
inline void Persion::_internal_set_age(int32_t value) {
  
  _impl_.age_ = value;
}
inline void Persion::set_age(int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:persion.Persion.age)
}

// int32 sex = 3;
inline void Persion::clear_sex() {
  _impl_.sex_ = 0;
}
inline int32_t Persion::_internal_sex() const {
  return _impl_.sex_;
}
inline int32_t Persion::sex() const {
  // @@protoc_insertion_point(field_get:persion.Persion.sex)
  return _internal_sex();
}
inline void Persion::_internal_set_sex(int32_t value) {
  
  _impl_.sex_ = value;
}
inline void Persion::set_sex(int32_t value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:persion.Persion.sex)
}

// -------------------------------------------------------------------

// ChatCmd

// .persion.Persion p = 1;
inline bool ChatCmd::_internal_has_p() const {
  return this != internal_default_instance() && _impl_.p_ != nullptr;
}
inline bool ChatCmd::has_p() const {
  return _internal_has_p();
}
inline void ChatCmd::clear_p() {
  if (GetArenaForAllocation() == nullptr && _impl_.p_ != nullptr) {
    delete _impl_.p_;
  }
  _impl_.p_ = nullptr;
}
inline const ::persion::Persion& ChatCmd::_internal_p() const {
  const ::persion::Persion* p = _impl_.p_;
  return p != nullptr ? *p : reinterpret_cast<const ::persion::Persion&>(
      ::persion::_Persion_default_instance_);
}
inline const ::persion::Persion& ChatCmd::p() const {
  // @@protoc_insertion_point(field_get:persion.ChatCmd.p)
  return _internal_p();
}
inline void ChatCmd::unsafe_arena_set_allocated_p(
    ::persion::Persion* p) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.p_);
  }
  _impl_.p_ = p;
  if (p) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:persion.ChatCmd.p)
}
inline ::persion::Persion* ChatCmd::release_p() {
  
  ::persion::Persion* temp = _impl_.p_;
  _impl_.p_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::persion::Persion* ChatCmd::unsafe_arena_release_p() {
  // @@protoc_insertion_point(field_release:persion.ChatCmd.p)
  
  ::persion::Persion* temp = _impl_.p_;
  _impl_.p_ = nullptr;
  return temp;
}
inline ::persion::Persion* ChatCmd::_internal_mutable_p() {
  
  if (_impl_.p_ == nullptr) {
    auto* p = CreateMaybeMessage<::persion::Persion>(GetArenaForAllocation());
    _impl_.p_ = p;
  }
  return _impl_.p_;
}
inline ::persion::Persion* ChatCmd::mutable_p() {
  ::persion::Persion* _msg = _internal_mutable_p();
  // @@protoc_insertion_point(field_mutable:persion.ChatCmd.p)
  return _msg;
}
inline void ChatCmd::set_allocated_p(::persion::Persion* p) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.p_;
  }
  if (p) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(p);
    if (message_arena != submessage_arena) {
      p = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.p_ = p;
  // @@protoc_insertion_point(field_set_allocated:persion.ChatCmd.p)
}

// uint64 time = 2;
inline void ChatCmd::clear_time() {
  _impl_.time_ = uint64_t{0u};
}
inline uint64_t ChatCmd::_internal_time() const {
  return _impl_.time_;
}
inline uint64_t ChatCmd::time() const {
  // @@protoc_insertion_point(field_get:persion.ChatCmd.time)
  return _internal_time();
}
inline void ChatCmd::_internal_set_time(uint64_t value) {
  
  _impl_.time_ = value;
}
inline void ChatCmd::set_time(uint64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:persion.ChatCmd.time)
}

// string content = 3;
inline void ChatCmd::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& ChatCmd::content() const {
  // @@protoc_insertion_point(field_get:persion.ChatCmd.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatCmd::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:persion.ChatCmd.content)
}
inline std::string* ChatCmd::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:persion.ChatCmd.content)
  return _s;
}
inline const std::string& ChatCmd::_internal_content() const {
  return _impl_.content_.Get();
}
inline void ChatCmd::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatCmd::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatCmd::release_content() {
  // @@protoc_insertion_point(field_release:persion.ChatCmd.content)
  return _impl_.content_.Release();
}
inline void ChatCmd::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:persion.ChatCmd.content)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PersionList

// map<int32, .persion.Persion> list = 1;
inline int PersionList::_internal_list_size() const {
  return _impl_.list_.size();
}
inline int PersionList::list_size() const {
  return _internal_list_size();
}
inline void PersionList::clear_list() {
  _impl_.list_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::persion::Persion >&
PersionList::_internal_list() const {
  return _impl_.list_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::persion::Persion >&
PersionList::list() const {
  // @@protoc_insertion_point(field_map:persion.PersionList.list)
  return _internal_list();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::persion::Persion >*
PersionList::_internal_mutable_list() {
  return _impl_.list_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::persion::Persion >*
PersionList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_map:persion.PersionList.list)
  return _internal_mutable_list();
}

// uint64 time = 2;
inline void PersionList::clear_time() {
  _impl_.time_ = uint64_t{0u};
}
inline uint64_t PersionList::_internal_time() const {
  return _impl_.time_;
}
inline uint64_t PersionList::time() const {
  // @@protoc_insertion_point(field_get:persion.PersionList.time)
  return _internal_time();
}
inline void PersionList::_internal_set_time(uint64_t value) {
  
  _impl_.time_ = value;
}
inline void PersionList::set_time(uint64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:persion.PersionList.time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace persion

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protomsg_2eproto
